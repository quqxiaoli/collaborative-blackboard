package mocks // 通常将 mock 对象放在专门的 mocks 子包中

import (
	"context"
	// 导入 domain 和 repository 包
	"collaborative-blackboard/internal/domain"
	"collaborative-blackboard/internal/repository"

	"github.com/stretchr/testify/mock" // 导入 testify mock
)

// UserRepository is an autogenerated mock type for the UserRepository type
// 通常 mock 文件名会加上 _mock 后缀
type UserRepository struct {
	mock.Mock // 嵌入 mock.Mock
}

// FindByUsername 提供了一个模拟函数，带有字段：ctx, username
func (_m *UserRepository) FindByUsername(ctx context.Context, username string) (*domain.User, error) {
	// 调用 mock.Called 来记录方法被调用，并返回预设的结果
	ret := _m.Called(ctx, username)

	// 处理返回值的类型断言
	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, username)
	} else {
		// 如果返回值不是 nil，尝试进行类型断言
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1) // 获取预设的错误
	}

	return r0, r1
}

// FindByID 提供了一个模拟函数，带有字段：ctx, id
func (_m *UserRepository) FindByID(ctx context.Context, id uint) (*domain.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, uint) *domain.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save 提供了一个模拟函数，带有字段：ctx, user
func (_m *UserRepository) Save(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0) // Save 只返回一个 error
	}

	return r0
}

// --- 断言 Mock 实现了接口 ---
// 这是一个编译时检查，确保我们的 Mock 类型确实实现了 UserRepository 接口
var _ repository.UserRepository = (*UserRepository)(nil)